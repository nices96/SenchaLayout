/*
 * File: app/controller/recordController.js
 *
 * This file was generated by Sencha Architect version 3.0.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.recordController', {
    extend: 'Ext.app.Controller',

    stores: [
        'SampleDataStore'
    ],

    refs: [
        {
            ref: 'detailPanel',
            selector: '#detailPanel'
        },
        {
            ref: 'detailToolbar',
            selector: '#detailToolbar'
        },
        {
            ref: 'gridPanel',
            selector: '#gridPanel'
        }
    ],

    select: function(rowmodel, record, index, eOpts) {
        var details = this.getDetailPanel(),
            toolbar = this.getDetailToolbar();

        details.update(record.data);
        toolbar.show();
    },

    add: function(target) {
        var formWindow = Ext.create('widget.recordForm'),
            form = formWindow.down('form').getForm(),
            model = Ext.create('model.record');

        form.loadRecord(model);
        formWindow.show();
    },

    cancel: function(target) {
        var formWindow = target.up("window");
        formWindow.destroy();
    },

    save: function(target) {
        var form = target.up('form').getForm(),
            formWindow = target.up('window'),
            detailPanel = this.getDetailPanel(),
            detailToolbar = this.getDetailToolbar(),
            record = form.getRecord(),
            store = this.getSampleDataStoreStore(),
            isNew = !record.get('id');

        var errors = form.updateRecord();

        if (form.isValid()) {
            if (isNew) {
                var id = store.getTotalCount() + 1;
                record.set("id", id);

                store.add(record);
            }

            store.commitChanges();
            detailPanel.update(record.getData());
            formWindow.destroy();
        } else {
            form.markInvalid(errors);
        }
    },

    edit: function(target) {
        var data = target.up('panel').data,
            store = this.getSampleDataStoreStore(),
            record = store.getById(data.id),
            formWindow = Ext.create('widget.recordForm'),
            form = formWindow.down('form').getForm();

        form.loadRecord(record);
        formWindow.show();
    },

    deleteOne: function(target) {
        var me = this;

        Ext.Msg.confirm('Confirm', 'Are you sure you want to delete this record?', function(btn) {
            if (btn == 'yes') {
                var data = target.up('panel').data,
                    store = me.getSampleDataStoreStore(),
                    record = store.getById(data.id),
                    detailPanel = me.getDetailPanel(),
                    detailToolbar = me.getDetailToolbar();

                store.remove(record);
                detailPanel.update(null);
                detailToolbar.hide();
            }
        });
    },

    deleteAll: function(target) {
        var me = this;

        var gridPanel = this.getGridPanel();
        var records = gridPanel.getSelectionModel().getSelection();

        if (records.length === 0) {
            Ext.Msg.alert('Message', 'No selection record.');
        } else {
            Ext.Msg.confirm('Confirm', 'Are you sure you want to delete selected record?', function(btn) {
                if (btn == 'yes') {
                    var store = me.getSampleDataStoreStore(),
                        detailPanel = me.getDetailPanel(),
                        detailToolbar = me.getDetailToolbar();

                    for (i = 0; i < records.length; i++) {
                        store.remove(records[i]);
                    }

                    detailPanel.update(null);
                    detailToolbar.hide();
                }
            });
        }


    },

    onLaunch: function() {
        var detailPanel = this.getDetailPanel();
        detailPanel.update(null);
    },

    init: function(application) {
        this.control({
            "#gridPanel": {
                select: this.select
            },
            "#addBtn": {
                click: this.add
            },
            "#cancelBtn": {
                click: this.cancel
            },
            "#saveBtn": {
                click: this.save
            },
            "#editBtn": {
                click: this.edit
            },
            "#detailPanel #deleteBtn": {
                click: this.deleteOne
            },
            "#gridPanel #deleteBtn": {
                click: this.deleteAll
            }
        });
    }

});
